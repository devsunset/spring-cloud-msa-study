server:
  port: 8000
  
management:
  endpoints:
    web:
      exposure:
        include: health, beans, refresh   

eureka:
  client:
    fetch-registry: true                        # 유레카 클라이언트 활성화
    register-with-eureka: true                  # 유레카 클라이언트 활성화
    service-url:
      defaultZone: http://localhost:8761/eureka # 유레카 클라이언트로 등록
      
      
logging:
  level:
    org:
      springframework:
        web: DEBUG
#  pattern:
#    level: '[%X{traceId}/%X{spanId}] %-5p [%t] %C{2} - %m%n'


spring:
  application:
    name: gateway-service
  sleuth:
    sampler:
      probability: '1.0'
    traceId128: 'true'
  zipkin: 
    base-url: http://localhost:9411/ 
    
###  url IP:PORT 직접 지정 방식 - 확장에 제약 
#  cloud:
#    gateway:
#      routes:
#        - id: user-service
#          uri: http://localhost:8001 # 포워딩할 주소, http://localhost:8000/user 로 들어오면 http://localhost:8001 로 포워딩
#          predicates:
#            - Path=/user/**           # 해당 gateway 서버의 /user/**로 들어오는 요은 user-service로 인식하겠다는 조건
#
#        - id: team-service
#          uri: http://localhost:8002 # 포워딩 할 주소, http://localhost:8000/team 로 들어오면 http://localhost:8002 로 포워딩
#          predicates:
#            - Path=/team/**          # 해당 gateway 서버의 /team/**로 들어오는 요은 team-service로 인식하겠다는 조건    
 
 ### Eureka Server 에서 각각 인스턴스 정보를 받아 로드밸런싱 하기
  cloud:
    gateway:
      routes:
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user/**
        - id: team-service
          uri: lb://TEAM-SERVICE
          predicates:
            - Path=/team/**   
 
            
### yml shortcut으로 Route Predicate 조작하기

## After & Before & Between
#  cloud:
#    gateway:
#      routes:
#        - id: user-service
#          uri: lb://USER-SERVICE
#          predicates:
#            - Path=/user/**
#            - After=2022-11-28T17:42:47.789-07:00 # 해당 날짜 이후에 서비스 정상 처리 
#
#        - id: team-service
#          uri: lb://TEAM-SERVICE
#          predicates:
#            - Path=/team/**
#            - Before=2023-11-28T17:42:47.789-07:00 # 해당 날짜 이전에 서비스 정상 처리 

## cookie
#	cloud:
#	    gateway:
#	      routes:
#	        - id: user-service
#	          uri: lb://USER-SERVICE
#	          predicates:
#	            - Path=/user/**
#	            - Cookie=valid, kakao # valid 값이 kakao면 정상 처리 
#	
#	        - id: team-service
#	          uri: lb://TEAM-SERVICE
#	          predicates:
#	            - Path=/team/**
#	            - Cookie=valid, naver # valid 값이 naver면 정상 처리 


## Method
#	  cloud:
#	    gateway:
#	      routes:
#	        - id: user-service
#	          uri: lb://USER-SERVICE
#	          predicates:
#	            - Path=/user/**
#	            - Method=GET          # GET 요청만 처리 
#	
#	        - id: team-service
#	          uri: lb://TEAM-SERVICE
#	          predicates:
#	            - Path=/team/**
#	            - Method=POST         # POST 요청만 처리 


### yml shortcut으로 Route Filters 조작하기

## AddRequestHeader, AddResponseHeader (RemoveRequestHeader과 RemoveResponseHeader 도 사용 가능)
#  cloud:
#    gateway:
#      routes:
#        - id: user-service
#          uri: lb://USER-SERVICE
#          predicates:
#            - Path=/user/**
#          filters:                                   #UserServiceApplication @GetMapping("/user/auth") 메소드 참조  
#            - AddRequestHeader=token, 123456         # request header에 값 추가 
#            - AddResponseHeader=authenticated, yes   # response header에 값 추가 


## AddRequestParameter
#   cloud:
#    gateway:
#      routes:
#        - id: add_request_parameter_route
#          uri: https://example.org
#          filters:
#            - AddRequestParameter=red, blue          # parameter 추가 


##  RewritePath
#  cloud:
#    gateway:
#      routes:
#        - id: user-service
#          uri: lb://USER-SERVICE
#          predicates:
#            - Path=/user/**
#          filters:
#            - RewritePath=/user/?(?<segment>.*), /$\{segment}  # /user/ 경로를 없앰
#
#        - id: team-service
#          uri: lb://TEAM-SERVICE
#          predicates:
#            - Path=/team/**
#          filters:
#            - RewritePath=/team/?(?<segment>.*), /$\{segment} # /team/ 경로를 없앰


### application.yml에 우리가 정의한 CustomFilter 등록하기 - CustomAuthFilter.java 파일 참조 
#  cloud:
#    gateway:
#      routes:
#        - id: user-service
#          uri: lb://USER-SERVICE
#          predicates:
#            - Path=/user/**
#          filters:
#            - RewritePath=/user/?(?<segment>.*), /$\{segment}
#            - CustomAuthFilter
#
#        - id: team-service
#          uri: lb://TEAM-SERVICE
#          predicates:
#            - Path=/team/**
#          filters:
#            - RewritePath=/user/?(?<segment>.*), /$\{segment}








   